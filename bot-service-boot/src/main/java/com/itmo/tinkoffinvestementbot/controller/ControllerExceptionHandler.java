package com.itmo.tinkoffinvestementbot.controller;

import com.itmo.tinkoffinvestementbot.exception.TradingBotException;
import com.itmo.tinkoffinvestementbot.exception.chat.*;
import com.itmo.tinkoffinvestementbot.model.domain.User;
import com.itmo.tinkoffinvestementbot.service.bot.BotSenderService;
import com.itmo.tinkoffinvestementbot.service.users.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

@Slf4j
@ControllerAdvice
@RequiredArgsConstructor
public class ControllerExceptionHandler {

    private final UserService userService;
    private final BotSenderService senderService;

    private static final String PROCESSING_ERROR_MSG =
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üò¢\n"
                    + "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∞ —Å –Ω–µ–π –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç!üë®üèª‚Äçüíª";
    private static final String BOT_USER_DENIED_MSG = "–ë–æ—Ç–∞–º –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!";
    private static final String UNKNOWN_UPDATE_TYPE_MSG = "–°–µ–π—á–∞—Å —è –Ω–µ –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µü•≤";
    private static final String UNKNOWN_USER_MSG = "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É `/start`üöÄ";
    private static final String ACCESS_DENIED_MSG = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω";

    @ExceptionHandler(value = BotUserDeniedException.class)
    public void handleBotUserDeniedException(BotUserDeniedException e) {
        senderService.sendMessageAsync(
                SendMessage.builder()
                        .chatId(String.valueOf(e.getChatId()))
                        .text(BOT_USER_DENIED_MSG)
                        .build(), 0
        );
    }

    @ExceptionHandler(value = UnknownUserException.class)
    public void handleUnknownUserException(UnknownUserException e) {
        senderService.sendMessageAsync(
                SendMessage.builder()
                        .chatId(String.valueOf(e.getChatId()))
                        .text(UNKNOWN_USER_MSG)
                        .build(), 0
        );
    }

    @ExceptionHandler(value = AccessDeniedException.class)
    public void handleAccessDeniedException(AccessDeniedException e) {
        senderService.sendMessageAsync(
                SendMessage.builder()
                        .chatId(String.valueOf(e.getChatId()))
                        .text(ACCESS_DENIED_MSG)
                        .build(), 0
        );
    }

    @ExceptionHandler(value = BlockedUserException.class)
    public void handleBlockedUserException(BlockedUserException e) {
        log.info("User with id - {} was blocked bot", e.getChatId());
        User user = userService.getUserByChatId(e.getChatId());
        user.setBlocked(true);
        userService.save(user);
    }

    @ExceptionHandler(value = UnknownUpdateTypeException.class)
    public void handleUnknownUpdateTypeException(UnknownUpdateTypeException e) {
        senderService.sendMessageAsync(
                SendMessage.builder()
                        .chatId(String.valueOf(e.getChatId()))
                        .text(UNKNOWN_UPDATE_TYPE_MSG)
                        .build(), 0
        );
    }

    @ExceptionHandler(value = ProcessingException.class)
    public void handleProcessingException(ProcessingException e) {
        senderService.sendMessageAsync(
                SendMessage.builder()
                        .chatId(String.valueOf(e.getChatId()))
                        .text(PROCESSING_ERROR_MSG)
                        .build(), 0
        );
        senderService.notifyMasters(e.getMasterMessage());
    }

    @ExceptionHandler(value = TradingBotException.class)
    public void handleMonitorBotException(TradingBotException e) {
        log.warn("Exception: \n{}", e.getMessage());
    }
}
